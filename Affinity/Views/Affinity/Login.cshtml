@{
    ViewData["Title"] = "Login";
}

@section styles {
    <style>
        p {
            color: blue;
        }
    </style>
    <link type="text/css" rel="stylesheet" href="https://cdn.firebase.com/libs/firebaseui/4.2.0/firebaseui.css" />
}

<h1>Login</h1>
<div v-if="!user">
    <p>{{ message }}</p>
    <div id="firebaseui-auth-container"></div>
    <div id="loader">Loading...</div>
</div>

<div v-else>
    <h2>Welcome, {{ user.displayName }}</h2>
    <p>Your email is {{ user.email }}</p>
</div>

@section scripts {
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script type="text/javascript" src="https://www.gstatic.com/firebasejs/6.6.2/firebase-app.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/firebasejs/6.6.1/firebase-auth.js"></script>
    <script type="text/javascript" src="https://cdn.firebase.com/libs/firebaseui/4.2.0/firebaseui.js"></script>
    <script type="text/javascript" src="~/js/FIREBASE_CONFIG.js"></script>
    <script type="text/javascript" src="~/js/firebase.js"></script>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                message: 'Hello Vue!',
                user: {}
            },
            mounted: function () {
                // Initialize the FirebaseUI Widget using Firebase.
                var ui = new firebaseui.auth.AuthUI(firebase.auth());
                var uiConfig = {
                    callbacks: {
                        signInSuccessWithAuthResult: function (authResult, redirectUrl) {
                            // User successfully signed in.
                            // Return type determines whether we continue the redirect automatically
                            // or whether we leave that to developer to handle.
                            //If this is a new user && his provider is password (username/password registeration) && his email is not verified,
                            if (authResult.additionalUserInfo.isNewUser && authResult.additionalUserInfo.providerId == 'password' && !authResult.user.emailVerified) {
                                // To apply the default browser preference instead of explicitly setting it.
                                // firebase.auth().useDeviceLanguage();

                                //Send him the verification email, show him a toastr message, then apply a force logout
                                authResult.user.sendEmailVerification();
                                firebase.auth().signOut();
                                alert("Account created successfully. Please verify your email address.");
                            }

                            //If this is not a new user && his provider is password (username/password registeration) && his email is not verified.
                            //On the other hand, the UI shows the user a button to resend the verification email.
                            else if (!authResult.additionalUserInfo.isNewUser && authResult.additionalUserInfo.providerId == 'password' && !authResult.user.emailVerified) {
                                // To apply the default browser preference instead of explicitly setting it.
                                // firebase.auth().useDeviceLanguage();

                                //Show him a toaster message that his email is not verified, then apply a force logout.
                                firebase.auth().signOut();
                                const shallSendVerficationEmail = confirm("Your email address is not verified. Would you like to resend verification email?")
                                if (shallSendVerficationEmail)
                                    authResult.user.sendEmailVerification();
                            }
                            //Otherwise an old user login normally.
                            else
                                return true;


                        },
                        uiShown: function () {
                            // The widget is rendered.
                            // Hide the loader.
                            document.getElementById('loader').style.display = 'none';
                        }
                    },
                    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
                    signInFlow: 'popup',
                    signInSuccessUrl: '',
                    signInOptions: [
                        // Leave the lines as is for the providers you want to offer your users.
                        //firebase.auth.GoogleAuthProvider.PROVIDER_ID,
                        //firebase.auth.FacebookAuthProvider.PROVIDER_ID,
                        //firebase.auth.TwitterAuthProvider.PROVIDER_ID,
                        //firebase.auth.GithubAuthProvider.PROVIDER_ID,
                        //firebase.auth.PhoneAuthProvider.PROVIDER_ID,
                        firebase.auth.EmailAuthProvider.PROVIDER_ID
                    ],
                };

                // The start method will wait until the DOM is loaded.
                ui.start('#firebaseui-auth-container', uiConfig);
            },
            created: function () {
                // When user logs in, store it in this Vue app's data.
                // Add cookie storing user token.
                firebase.auth().onAuthStateChanged(user => {
                    if (user) {
                        this.user = user;
                        user.getIdToken().then(function(idToken) {
                            document.cookie = "aff_t=" + idToken;
                        }); 
                    }
                    // If not a valid user, reset token
                    else {
                        document.cookie = "aff_t=";
                    }
                });
            }
        })
    </script>
}
