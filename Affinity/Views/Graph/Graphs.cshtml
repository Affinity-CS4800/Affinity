@model IEnumerable<GraphIDName>
@{
    ViewData["Title"] = "Your Graphs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <style>
        .graphs {
            padding: 3vh 2rem 15vh 2rem;
            width: 80%;
            margin: 0 auto;
        }

        .graphLink {
            display: inline-block;
            max-width: 20%;
            min-width: 15%;
            margin-right: 1rem;
            margin-left: 1rem;
            margin-bottom: 2rem;
            height: 150px;
            background: orangered;
            text-decoration: none;
            text-align: center;
            padding: 1rem 0 0 0;
            font-weight: bold;
            color: #efefef;
            background: linear-gradient(180deg, #00d2ff 0%, #3a47d5 80%);
            filter: grayscale(50%);
            transition-duration: .25s;
            transition-property: filter, transform;
            transition-timing-function: ease-in-out;
            min-height: 180px;
            min-width: 230px;
        }

            .graphLink:hover {
                filter: grayscale(0%);
                transform: translateY(-2px);
            }

        .graphLinkDelete {
            background: linear-gradient(0deg, rgba(107,27,0,1) 0%, rgba(255,0,0,1) 80%);
            filter: grayscale(0%);
        }

        .cta-action {
            display: block;
            max-width: 30ch;
            margin: 0 auto 2rem auto;
        }

        .center-contents {
            text-align: center;
        }

        #circle {
            position: relative;
            margin-left: calc(100%/2 - 125px);
            height: 250px;
            width: 250px;
            text-align: center;
        }

        .circle-contents {
            position: relative;
            top: -160px;
        }

        .preview {
            margin-top: 10px;
            border: 2px solid black;
        }

        .close {
            cursor: pointer;
            position: absolute;
            top: 0%;
            right: 0%;
            padding: 10px 16px;
            font-size: 22px;
        }

       
    </style>

}

<div id="circle">
    <h1 class="circle-contents">Your Graphs</h1>
    <h3 class="circle-contents">@Model.Count() / @ViewData["MaxGraphs"]</h3>
</div>
<section class="graphs">
    <a class="cta-action" href="/graph">Create new graph</a>
    <div class="center-contents container">
        @foreach (var graph in Model)
        {
            <a class="graphLink" href="graph/@graph.GraphID">
                <span class="close" v-on:click="deleteGraph('@graph.GraphID', $event)" v-on:mouseover="mouseover($event)" v-on:mouseleave="mouseleave($event)">x</span>
                @if (@graph.Name == null)
                {
                    @graph.GraphID;
                }
                else
                {
                    @graph.Name;
                }
                <div>
                    <img src="" id="@graph.GraphID" class="preview" width="110" height="100" />
                </div>
            </a>

        }
        </div>
</section>


@section scripts {
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script type="text/javascript" src="https://www.gstatic.com/firebasejs/6.6.2/firebase-app.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/firebasejs/6.6.1/firebase-auth.js"></script>
    <script type="text/javascript" src="~/js/FIREBASE_CONFIG.js"></script>
    <script type="text/javascript" src="~/js/firebase.js"></script>
    <script src="~/js/circle-progress.min.js"></script>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                user: false,
                deleteID: ""
            },
            created: function () {
                // Store user
                firebase.auth().onAuthStateChanged(user => {
                    this.user = user;
                });

                data = @Html.Raw(Json.Serialize(Model));

                for (i = 0; i < data.length; i++) {
                    imgData = localStorage.getItem(data[i].graphID);
                    if (imgData != null) {
                        $('#' + data[i].graphID).attr("src", imgData);
                    } else {
                        $('#' + data[i].graphID).attr("src", "");
                        $('#' + data[i].graphID).attr("alt", "No preview yet. Try saving the graph again to allow this new feature!");
                    }
                }
            },
            methods: {
                signOut: function (event) {
                    if (this.user) {
                        firebase.auth().signOut().then(function () {
                            // Successfully signed out.
                            document.cookie = "aff_t=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
                        }).catch(function (error) {
                            // An error happened.
                        });
                        window.location.reload(true); // refresh page
                    }
                },
                deleteGraph: function (id, event) {
                    //Dont allow cancel or acceptance make the browser go to the graph like its been clicked
                    if (event) {
                        event.preventDefault();
                    }

                    this.deleteID = id;

                    if (confirm("Are you sure you want to delete " + id)) {
                        $.ajax({
                            type: 'POST',
                            url: "/api/removeGraph/" + id,
                            async: false,
                            success: function () {
                                window.location.reload(true);
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                alert(errorThrown);
                            }
                        });
                    } else {
                        this.deleteID = "";
                    }
                },
                mouseover: function (event) {
                    event.target.parentNode.classList.add("graphLinkDelete");
                },
                mouseleave: function (event) {
                    event.target.parentNode.classList.remove("graphLinkDelete");
                }
            }
        })

        $('#circle').circleProgress({
            value: @Model.Count() / @ViewData["MaxGraphs"],
            fill: {
                gradient: [["#00d2ff", 0.0], ["#3a47d5", 0.8]]
            },
            size: 250,
            startAngle: -Math.PI / 2.0,
            lineCap: "round"
        });


    </script>
}
